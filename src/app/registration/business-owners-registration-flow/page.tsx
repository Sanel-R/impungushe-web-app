"use client";
import * as z from "zod";
import {useForm} from "react-hook-form";
import {zodResolver} from "@hookform/resolvers/zod";
import {Form, FormField, FormItem, FormMessage, FormLabel, FormControl} from "@/components/ui/form";
import {Input} from "@/components/ui/input";
import {Button} from "@/components/ui/button";
import {Gender, PROVINCE, NumberOfEmployees, BusinessType} from "@/types/index";
import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from "@/components/ui/select";
import {phoneRegex, passwordRegex, urlRegex} from "@/types/index";

const GenderEnum = z.enum([Gender.Male.toString(), Gender.Female.toString(), Gender.Other.toString()]);
type GenderEnum = z.infer<typeof GenderEnum>;

const provinceEnum = z.enum([PROVINCE.EASTERN_CAPE.toString(), PROVINCE.FREE_STATE.toString(), PROVINCE.GAUTENG.toString(),
                             PROVINCE.KWAZULU_NATAL.toString(), PROVINCE.LIMPOPO.toString(), PROVINCE.MPUMALANGA.toString(),
                             PROVINCE.NORTHERN_CAPE.toString(), PROVINCE.NORTH_WEST.toString(), PROVINCE.WESTERN_CAPE.toString()
                            ]);
type provinceEnum = z.infer<typeof provinceEnum>;

const numberOfEmployeesEnum = z.enum([NumberOfEmployees.Small.toString(), NumberOfEmployees.Medium.toString(), NumberOfEmployees.High.toString()]);
type numberOfEmployeesEnum = z.infer<typeof numberOfEmployeesEnum>;

const BusinessTypeEnum = z.enum([BusinessType.Cooperative.toString(), BusinessType.Corporation.toString(), 
                                 BusinessType.LimitedLiabilityCompany.toString(), BusinessType.Partnership.toString(),
                                BusinessType.SoleProprietorShip.toString()]);

type BusinessTypeEnum = z.infer<typeof BusinessTypeEnum>;

const formScheme = z.object
(
    {
        // Business Owner --> Step 1.
        street: z.string().min(5, {message: "Street must be at least 5 characters"}).max(30),
        city: z.string().min(5, {message: "City must be at least 5 characters"}).max(30),
        province: provinceEnum,
        country: z.string().min(5, {message: "Country must be at least 5 characters"}),
        phoneNumber: z.string().regex(phoneRegex, {message: "Invalid phone provided"}),
        websiteUrl:  z.string().regex(urlRegex, {message: "Enter a valid website url"}),
       // userDateCreated: z.string().datetime(), --> Initialize implicitily 
       // lastLoginTime: z.string().datetime(), --> Initialize implicitily 

       // BusinessUser --> Step 2
       // businessUserId --> Autogenerated
       // businessOwnerId --> implicitily get from business owner.
       businessRegistrationNumber: z.string().min(5, {message: "Business registration number must be at least 5 characters"}),
       industryOrSector: z.string().min(5, {message: "Industry or sector must be at least 5 characters"}),
       companyDescription: z.string().min(5, {message: "Company description must be at least 5 characters"}),
       representativeName: z.string().min(5, {message: "Representative name must be at least 5 characters"}),
       representativePosition: z.string().min(5, {message: "Representative position must be at least 5 characters"}),
       representativePhoneNumber: z.string().regex(phoneRegex, {message: "Invalid phone provided"}),
       representativeEmailAddress: z.string().email({message: `Please enter valid email address.`}),
       yearEstablished: z.string().datetime({message: 'Please enter valid date'}),
       numberOfEployees: numberOfEmployeesEnum,
       annualRevenue: z.number().min(100, {message: "Annual revenue should be greater then R100 annually"}),
       businessTypes: BusinessTypeEnum,

       // IndividualUser --> Step 2
       // indivisualUserId --> Autogenerated
       // businessOwnerId --> implicitily get from business owner.
       fullName: z.string().min(5, {message: "The full name should at least have 5 characters"}).max(25, {message: "The fullname should at most have 25 characters"}),
       surname: z.string().min(5, {message: "The surname should at least have 5 characters"}).max(25, {message: "The surname should at most have 25 characters"}),
       gender: GenderEnum,
       identityDocument: z.string().min(5, {message: "You must upload a document"}),

       // Authorizaton email address. 
       emailAddress: z.string().email({message: `Please enter valid email address.`}),    
       password: z.string().regex(passwordRegex, {message: "Invalid password"}),
       passwordConfirm: z.string().regex(passwordRegex, {message: "Invalid password"}),
    }
).refine((data) => {
    return data.password === data.passwordConfirm
}, {
    message: "Passwords do not match",
    path: ["passwordConfirm"]
});

export default function BusinessOwnersRegistrationFlow()
{
    /**
     * Create a const form, and since the useForm is generic, we instintiate this into correct data type.
     */
    const form = useForm<z.infer<typeof formScheme>>
    (
        { 
            resolver: zodResolver(formScheme),
            defaultValues: 
            {
                // Business owner
                street: "",
                city: "",
                province: "",
                country: "",
                phoneNumber: "",
                websiteUrl:  "",

                // Business user
                businessRegistrationNumber: "",
                industryOrSector: "",
                companyDescription: "",
                representativeName: "",
                representativePosition: "",
                representativePhoneNumber: "",
                representativeEmailAddress: "",
                yearEstablished: "",
                numberOfEployees: "",
                annualRevenue: 0,
                businessTypes: "", 

                // Individual user
                fullName: "",
                surname: "",
                gender: "",
                identityDocument: "",

                // Authentication
                emailAddress: "",    
                password: "",
                passwordConfirm: "",
            },
        }
    );

    function onSubmit(values: z.infer<typeof formScheme>) {
        // Do something with the form values.
        // âœ… This will be type-safe and validated.
        console.log(values)
    }

    return (
        <div>
            <section>
                <h1 className="text-center mb-4"> Register as driver</h1>
            </section>
            <main className="flex flex-row justify-center">
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="max-w-md w-full flex-col gap-5">
                        {/* General driver information form. */}
                        <div 
                        className="flex flex-row justify-between my-2"
                        >
                            <FormField control={form.control} 
                                name="street" 
                                render={
                                    ({field}) => {
                                        return <FormItem>
                                            <FormLabel>
                                                Street
                                            </FormLabel>
                                            <FormControl>
                                                <Input 
                                                    placeholder="Street" 
                                                    type="text"
                                                    {...field} 
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    }
                            }/>

                            <FormField control={form.control} 
                                name="city" 
                                render={
                                    ({field}) => {
                                        return <FormItem>
                                            <FormLabel>
                                               City
                                            </FormLabel>
                                            <FormControl>
                                                <Input 
                                                    placeholder="city" 
                                                    type="text"
                                                    {...field} 
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    }
                            }/>
                        </div>

                        <div 
                        className="my-2"
                        >
                            <FormField control={form.control}
                                name="province"
                                render={({ field }) => {
                                    return (
                                        <FormItem>
                                            <FormLabel>
                                                Province
                                            </FormLabel>
                                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                                                <FormControl>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder="Select a provice" />
                                                    </SelectTrigger>
                                                </FormControl>
                                                <SelectContent>
                                                    <SelectItem value="EASTERN_CAPE"> EASTERN CAPE </SelectItem>
                                                    <SelectItem value="FREE_STATE"> FREE STATE </SelectItem>
                                                    <SelectItem value="GAUTENG"> GAUTENG </SelectItem>
                                                    <SelectItem value="KWAZULU_NATAL"> KWAZULU NATAL </SelectItem>
                                                    <SelectItem value="LIMPOPO"> LIMPOPO </SelectItem>
                                                    <SelectItem value="MPUMALANGA"> MPUMALANGA </SelectItem>
                                                    <SelectItem value="NORTHERN_CAPE"> NORTHERN CAPE </SelectItem>
                                                    <SelectItem value="NORTH_WEST"> NORTH WEST </SelectItem>
                                                    <SelectItem value="WESTERN_CAPE"> WESTERN CAPE </SelectItem>
                                                </SelectContent>
                                            </Select>
                                        </FormItem>
                                    );
                            }}/>
                        </div>

                        <div
                        className="flex flex-row justify-between my-2"
                        >
                            <FormField control={form.control} 
                                name="country" 
                                render={
                                    ({field}) => {
                                        return <FormItem>
                                            <FormLabel>
                                                Country
                                            </FormLabel>
                                            <FormControl>
                                                <Input 
                                                    placeholder="Country" 
                                                    type="text"
                                                    {...field} 
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    }
                            }/>

                            {/* Address validation */}
                            <FormField control={form.control} 
                                name="street" 
                                render={
                                    ({field}) => {
                                        return <FormItem>
                                            <FormLabel>
                                                Street
                                            </FormLabel>
                                            <FormControl>
                                                <Input 
                                                    placeholder="Street" 
                                                    type="text"
                                                    {...field} 
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    }
                            }/>
                        </div>

                        <div 
                        className="flex flex-row justify-between my-2"
                        >
                            <FormField control={form.control} 
                                name="phoneNumber" 
                                render={
                                    ({field}) => {
                                        return <FormItem>
                                            <FormLabel>
                                                Phone Number
                                            </FormLabel>
                                            <FormControl>
                                                <Input 
                                                    placeholder="Phone Number" 
                                                    type="text"
                                                    {...field} 
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    }
                            }/>

                            
                            <FormField control={form.control} 
                                name="city" 
                                render={
                                    ({field}) => {
                                        return <FormItem>
                                            <FormLabel>
                                                City
                                            </FormLabel>
                                            <FormControl>
                                                <Input 
                                                    placeholder="City" 
                                                    type="text"
                                                    {...field} 
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    }
                            }/>
                        </div>

                        <div 
                        className="flex flex-row justify-between my-2"
                        >
                            <FormField control={form.control} 
                                name="phoneNumber" 
                                render={
                                    ({field}) => {
                                        return <FormItem>
                                            <FormLabel>
                                                Phone Number
                                            </FormLabel>
                                            <FormControl>
                                                <Input 
                                                    placeholder="Phone Number" 
                                                    type="text"
                                                    {...field} 
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    }
                            }/>

                            
                            <FormField control={form.control} 
                                name="websiteUrl" 
                                render={
                                    ({field}) => {
                                        return <FormItem>
                                            <FormLabel>
                                                Web Site Url
                                            </FormLabel>
                                            <FormControl>
                                                <Input 
                                                    placeholder="websiteUrl" 
                                                    type="text"
                                                    {...field} 
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    }
                            }/>
                        </div>

                        {/* Address validation */}
                        {/* General driver information form. */}

                        <div 
                        className="my-2"
                        >
                            <Button type="submit">
                                Submit
                            </Button>
                        </div>
                    </form>
                </Form>
            </main>
        </div>
    )
}